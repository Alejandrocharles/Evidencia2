name: C++ Ubuntu CI Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Checkout del código fuente
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Paso 2: Instalación de dependencias necesarias para el proyecto
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake g++ make cppcheck gcovr

    # Paso 3: Configuración del proyecto CMake
    - name: Configure CMake Project
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
        echo "Project configured successfully!"

    # Paso 4: Compilación y ejecución de pruebas unitarias
    - name: Build and Test
      run: |
        cmake --build build --parallel 4
        cd build
        ctest --output-on-failure || true  # Agregar "|| true" para que continúe con los siguientes pasos incluso si ctest falla

    # Paso 5: Análisis estático de código (usando cppcheck)
    - name: Run Static Code Analysis
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 . 2> cppcheck_report.xml
        echo "Static analysis completed!"

    # Paso 6: Generación de reporte de cobertura de código (usando gcovr)
    - name: Generate Code Coverage Report
      run: |
        gcovr -r . --branches --json > coverage.json
        echo "Coverage report generated."

    # Paso 7: Subir informe de cobertura de código como comentario en Pull Request
    - name: Add Coverage Report as PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: coverage.json

    # Paso 8: Subir reporte de cobertura a Codecov
    - name: Upload Code Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.json
        token: ${{ secrets.CODECOV_TOKEN }}
